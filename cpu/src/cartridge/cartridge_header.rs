use std::{collections::HashMap, str::from_utf8};

use lazy_static::lazy_static;

lazy_static! {
    static ref CARTRIDGE_TYPES: HashMap<u8, &'static str> = HashMap::from([
        (0x00, "ROM ONLY"),
        (0x01, "MBC1"),
        (0x02, "MBC1+RAM"),
        (0x03, "MBC1+RAM+BATTERY"),
        (0x05, "MBC2"),
        (0x06, "MBC2+BATTERY"),
        (0x08, "ROM+RAM 1"),
        (0x09, "ROM+RAM+BATTERY 1"),
        (0x0B, "MMM01"),
        (0x0C, "MMM01+RAM"),
        (0x0D, "MMM01+RAM+BATTERY"),
        (0x0F, "MBC3+TIMER+BATTERY"),
        (0x10, "MBC3+TIMER+RAM+BATTERY 2"),
        (0x11, "MBC3"),
        (0x12, "MBC3+RAM 2"),
        (0x13, "MBC3+RAM+BATTERY 2"),
        (0x19, "MBC5"),
        (0x1A, "MBC5+RAM"),
        (0x1B, "MBC5+RAM+BATTERY"),
        (0x1C, "MBC5+RUMBLE"),
        (0x1D, "MBC5+RUMBLE+RAM"),
        (0x1E, "MBC5+RUMBLE+RAM+BATTERY"),
        (0x20, "MBC6"),
        (0x22, "MBC7+SENSOR+RUMBLE+RAM+BATTERY"),
        (0xFC, "POCKET CAMERA"),
        (0xFD, "BANDAI TAMA5"),
        (0xFE, "HuC3"),
        (0xFF, "HuC1+RAM+BATTERY"),
    ]);
    static ref OLD_LICENSE_CODES: HashMap<u8, &'static str> = HashMap::from([
        (0x00, "None"),
        (0x01, "Nintendo"),
        (0x08, "Capcom"),
        (0x09, "HOT-B"),
        (0x0A, "Jaleco"),
        (0x0B, "Coconuts Japan"),
        (0x0C, "Elite Systems"),
        (0x13, "EA (Electronic Arts)"),
        (0x18, "Hudson Soft"),
        (0x19, "ITC Entertainment"),
        (0x1A, "Yanoman"),
        (0x1D, "Japan Clary"),
        (0x1F, "Virgin Games Ltd.3"),
        (0x24, "PCM Complete"),
        (0x25, "San-X"),
        (0x28, "Kemco"),
        (0x29, "SETA Corporation"),
        (0x30, "Infogrames5"),
        (0x31, "Nintendo"),
        (0x32, "Bandai"),
        (0x33, "Indicates that the New licensee code should be used instead.",),
        (0x34, "Konami"),
        (0x35, "HectorSoft"),
        (0x38, "Capcom"),
        (0x39, "Banpresto"),
        (0x3C, ".Entertainment i"),
        (0x3E, "Gremlin"),
        (0x41, "Ubi Soft1"),
        (0x42, "Atlus"),
        (0x44, "Malibu Interactive"),
        (0x46, "Angel"),
        (0x47, "Spectrum Holoby"),
        (0x49, "Irem"),
        (0x4A, "Virgin Games Ltd.3"),
        (0x4D, "Malibu Interactive"),
        (0x4F, "U.S. Gold"),
        (0x50, "Absolute"),
        (0x51, "Acclaim Entertainment"),
        (0x52, "Activision"),
        (0x53, "Sammy USA Corporation"),
        (0x54, "GameTek"),
        (0x55, "Park Place"),
        (0x56, "LJN"),
        (0x57, "Matchbox"),
        (0x59, "Milton Bradley Company"),
        (0x5A, "Mindscape"),
        (0x5B, "Romstar"),
        (0x5C, "Naxat Soft13"),
        (0x5D, "Tradewest"),
        (0x60, "Titus Interactive"),
        (0x61, "Virgin Games Ltd.3"),
        (0x67, "Ocean Software"),
        (0x69, "EA (Electronic Arts)"),
        (0x6E, "Elite Systems"),
        (0x6F, "Electro Brain"),
        (0x70, "Infogrames5"),
        (0x71, "Interplay Entertainment"),
        (0x72, "Broderbund"),
        (0x73, "Sculptured Software6"),
        (0x75, "The Sales Curve Limited7"),
        (0x78, "THQ"),
        (0x79, "Accolade"),
        (0x7A, "Triffix Entertainment"),
        (0x7C, "Microprose"),
        (0x7F, "Kemco"),
        (0x80, "Misawa Entertainment"),
        (0x83, "Lozc"),
        (0x86, "Tokuma Shoten"),
        (0x8B, "Bullet-Proof Software2"),
        (0x8C, "Vic Tokai"),
        (0x8E, "Ape"),
        (0x8F, "I’Max"),
        (0x91, "Chunsoft Co.8"),
        (0x92, "Video System"),
        (0x93, "Tsubaraya Productions"),
        (0x95, "Varie"),
        (0x96, "Yonezawa/S’Pal"),
        (0x97, "Kemco"),
        (0x99, "Arc"),
        (0x9A, "Nihon Bussan"),
        (0x9B, "Tecmo"),
        (0x9C, "Imagineer"),
        (0x9D, "Banpresto"),
        (0x9F, "Nova"),
        (0xA1, "Hori Electric"),
        (0xA2, "Bandai"),
        (0xA4, "Konami"),
        (0xA6, "Kawada"),
        (0xA7, "Takara"),
        (0xA9, "Technos Japan"),
        (0xAA, "Broderbund"),
        (0xAC, "Toei Animation"),
        (0xAD, "Toho"),
        (0xAF, "Namco"),
        (0xB0, "Acclaim Entertainment"),
        (0xB1, "ASCII Corporation or Nexsoft"),
        (0xB2, "Bandai"),
        (0xB4, "Square Enix"),
        (0xB6, "HAL Laboratory"),
        (0xB7, "SNK"),
        (0xB9, "Pony Canyon"),
        (0xBA, "Culture Brain"),
        (0xBB, "Sunsoft"),
        (0xBD, "Sony Imagesoft"),
        (0xBF, "Sammy Corporation"),
        (0xC0, "Taito"),
        (0xC2, "Kemco"),
        (0xC3, "Square"),
        (0xC4, "Tokuma Shoten"),
        (0xC5, "Data East"),
        (0xC6, "Tonkinhouse"),
        (0xC8, "Koei"),
        (0xC9, "UFL"),
        (0xCA, "Ultra"),
        (0xCB, "Vap"),
        (0xCC, "Use Corporation"),
        (0xCD, "Meldac"),
        (0xCE, "Pony Canyon"),
        (0xCF, "Angel"),
        (0xD0, "Taito"),
        (0xD1, "Sofel"),
        (0xD2, "Quest"),
        (0xD3, "Sigma Enterprises"),
        (0xD4, "ASK Kodansha Co."),
        (0xD6, "Naxat Soft13"),
        (0xD7, "Copya System"),
        (0xD9, "Banpresto"),
        (0xDA, "Tomy"),
        (0xDB, "LJN"),
        (0xDD, "NCS"),
        (0xDE, "Human"),
        (0xDF, "Altron"),
        (0xE0, "Jaleco"),
        (0xE1, "Towa Chiki"),
        (0xE2, "Yutaka"),
        (0xE3, "Varie"),
        (0xE5, "Epcoh"),
        (0xE7, "Athena"),
        (0xE8, "Asmik Ace Entertainment"),
        (0xE9, "Natsume"),
        (0xEA, "King Records"),
        (0xEB, "Atlus"),
        (0xEC, "Epic/Sony Records"),
        (0xEE, "IGS"),
        (0xF0, "A Wave"),
        (0xF3, "Extreme Entertainment"),
        (0xFF, "LJN"),
    ]);
    static ref NEW_LICENSE_CODES: HashMap<&'static str, &'static str> = HashMap::from([
        ("00", "None"),
        ("01", "Nintendo Research & Development 1"),
        ("08", "Capcom"),
        ("13", "EA (Electronic Arts)"),
        ("18", "Hudson Soft"),
        ("19", "B-AI"),
        ("20", "KSS"),
        ("22", "Planning Office WADA"),
        ("24", "PCM Complete"),
        ("25", "San-X"),
        ("28", "Kemco"),
        ("29", "SETA Corporation"),
        ("30", "Viacom"),
        ("31", "Nintendo"),
        ("32", "Bandai"),
        ("33", "Ocean Software/Acclaim Entertainment"),
        ("34", "Konami"),
        ("35", "HectorSoft"),
        ("37", "Taito"),
        ("38", "Hudson Soft"),
        ("39", "Banpresto"),
        ("41", "Ubi Soft1"),
        ("42", "Atlus"),
        ("44", "Malibu Interactive"),
        ("46", "Angel"),
        ("47", "Bullet-Proof Software2"),
        ("49", "Irem"),
        ("50", "Absolute"),
        ("51", "Acclaim Entertainment"),
        ("52", "Activision"),
        ("53", "Sammy USA Corporation"),
        ("54", "Konami"),
        ("55", "Hi Tech Expressions"),
        ("56", "LJN"),
        ("57", "Matchbox"),
        ("58", "Mattel"),
        ("59", "Milton Bradley Company"),
        ("60", "Titus Interactive"),
        ("61", "Virgin Games Ltd.3"),
        ("64", "Lucasfilm Games4"),
        ("67", "Ocean Software"),
        ("69", "EA (Electronic Arts)"),
        ("70", "Infogrames5"),
        ("71", "Interplay Entertainment"),
        ("72", "Broderbund"),
        ("73", "Sculptured Software6"),
        ("75", "The Sales Curve Limited7"),
        ("78", "THQ"),
        ("79", "Accolade"),
        ("80", "Misawa Entertainment"),
        ("83", "lozc"),
        ("86", "Tokuma Shoten"),
        ("87", "Tsukuda Original"),
        ("91", "Chunsoft Co.8"),
        ("92", "Video System"),
        ("93", "Ocean Software/Acclaim Entertainment"),
        ("95", "Varie"),
        ("96", "Yonezawa/s’pal"),
        ("97", "Kaneko"),
        ("99", "Pack-In-Video"),
        ("9H", "Bottom Up"),
        ("A4", "Konami (Yu-Gi-Oh!)"),
        ("BL", "MTO"),
        ("DK", "Kodansha"),
    ]);
}

pub struct CartridgeHeader {
    pub entry: [u8; 4],
    pub logo: [u8; 48],
    pub title: String,
    pub cgb_flag: u8,
    pub new_licensee_code: [u8; 2],
    pub sgb_flag: u8,
    pub cartridge_type: u8,
    pub rom_size: u8,
    pub ram_size: u8,
    pub destination_code: u8,
    pub old_licensee_code: u8,
    pub version: u8,
    pub checksum: u8,
    pub global_checksum: u16,
}

impl Default for CartridgeHeader {
    fn default() -> Self {
        Self {
            entry: [0; 4],
            logo: [0; 48],
            title: Default::default(),
            cgb_flag: 0,
            new_licensee_code: [0; 2],
            sgb_flag: 0,
            cartridge_type: 0,
            rom_size: 0,
            ram_size: 0,
            destination_code: 0,
            old_licensee_code: 0,
            version: 0,
            checksum: 0,
            global_checksum: 0,
        }
    }
}

impl CartridgeHeader {
    pub fn load(bytes: &[u8]) -> Self {
        CartridgeHeader {
            entry: bytes[0x0100..=0x0103].try_into().unwrap(),
            logo: bytes[0x0104..=0x0133].try_into().unwrap(),
            title: from_utf8(&bytes[0x0134..=0x0143]).unwrap_or("NO NAME").to_owned(),
            cgb_flag: bytes[0x0143],
            new_licensee_code: bytes[0x0144..=0x0145].try_into().unwrap(),
            sgb_flag: bytes[0x0146],
            cartridge_type: bytes[0x0147],
            rom_size: bytes[0x0148],
            ram_size: bytes[0x0149],
            destination_code: bytes[0x014A],
            old_licensee_code: bytes[0x014B],
            version: bytes[0x014C],
            checksum: bytes[0x014D],
            global_checksum: (bytes[0x014E] as u16) << 8 | bytes[0x014F] as u16,
        }
    }

    pub fn get_cartridge_type(&self) -> String {
        String::from(*CARTRIDGE_TYPES.get(&self.cartridge_type).unwrap_or(&"UNKNOWN"))
    }

    pub fn get_license_code(&self) -> String {
        if self.old_licensee_code == 0x33 {
            // I may or may not be doing this wrong.
            let code = from_utf8(&self.new_licensee_code).expect("Invalid sequence");
            return String::from(*NEW_LICENSE_CODES.get(code).unwrap_or(&"UNKNOWN"));
        }
        String::from(*OLD_LICENSE_CODES.get(&self.old_licensee_code).unwrap_or(&"UNKNOWN"))
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test() {}
}
